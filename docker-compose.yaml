# Docker compose file for local PySpark 
version: '3.7'

services:
  notebook:
    build:
      context: ./docker/notebook
      args:
        - PYTHON_VERSION=3.10
    volumes:
      - ./workdir:/home/jovyan/work
      - ./docker/spark/spark-defaults.conf:/usr/local/spark/conf/spark-defaults.conf
    user: root
    command:
      - start-notebook.sh
      - --LabApp.token=''
      - --NotebookApp.token=''
    environment:
      - JUPYTER_ENABLE_LAB="yes"
      - GRANT_SUDO="yes"
    ports:
      - "8888:8888"
      - "4040:4040"

  # === Apache Spark ===
  spark:
    build:
      context: ./docker/spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - '8080:8080'
    volumes:
      - ./docker/spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "from urllib.request import urlopen; urlopen('http://localhost:8080').read()"
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  spark-worker:
    image: docker.io/bitnami/spark:3.5
    depends_on:
      - spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark

  # === MinIO ===
  minio:
    hostname: minio
    image: "minio/minio:RELEASE.2023-11-15T20-43-25Z"
    ports:
      - "9001:9001"
      - "9000:9000"
    command: [ "server", "/data", "--console-address", ":9001" ]
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123

  # === Apache Cassandra ===
  cassandra:
    image: docker.io/bitnami/cassandra:4.1
    ports:
      - '7000:7000'
      - '9042:9042'
    volumes:
      - 'cassandra_data:/bitnami'
    environment:
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_PASSWORD=cassandra
    healthcheck:
      test:
        [
          "CMD",
          "cqlsh",
          "-u",
          "cassandra",
          "-p",
          "cassandra",
          "-e",
          "describe cluster"
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  # === Apache Flink ===
  flink-jobmanager:
    image: flink:1.18.0
    hostname: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager"
    volumes:
      - .:/home

  flink-taskmanager:
    image: flink:1.18.0
    hostname: taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    deploy:
      replicas: 2
    volumes:
      - .:/home
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 4

volumes:
  cassandra_data:
  minio_data:
